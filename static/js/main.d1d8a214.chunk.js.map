{"version":3,"sources":["components/Button/Button.jsx","components/Home/Home.jsx","data_fetchers/QuizFetcher.js","models/Quiz.js","components/Quiz/Quiz.jsx","App.js","index.js"],"names":["Button","props","onClickHandler","className","onClick","children","Home","history","console","log","push","QuizFetcher","axios","get","response","data","Quiz","question","correctAnswer","incorrectAnswers","this","_question","_correctAnswer","_incorrectAnswers","_","shuffle","answer","fetch","quizDataList","results","map","result","he","decode","correct_answer","incorrect_answers","str","quizData","state","quizzes","currentIndex","numberOfCorrects","a","restart","setState","QuizModel","fetchAndCreateQuizzes","quiz","judgeCorrectAnswer","alert","length","renderLoading","renderQuiz","renderResult","to","answers","shuffleAnswers","index","selectAnswer","id","React","Component","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1d8a214.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\n\r\n// クラスコンポーネントで作成\r\nconst Button = (props) => {\r\n\r\n    let { onClickHandler } = props;\r\n\r\n    // onClickHandlerに関数以外の値がセットされていたら、\r\n    // ボタンクリック時にエラーを出さないために何も中身のない\r\n    // 関数を実行する\r\n    if (typeof onClickHandler !== 'function') {\r\n        onClickHandler = () => {};\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"Button\"\r\n            onClick={onClickHandler}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport Button from '../Button/Button';\r\n\r\n// Homeはreact routerで呼ばれるので、\r\n// reaact routerのprops(history/location/match)を受け取れる\r\nconst Home = ({history}) => {\r\n\r\n    console.log(history, '@@@@@@@@@@');\r\n\r\n    return (\r\n        <div>\r\n            <h1>ホーム</h1>\r\n            <Button onClickHandler={() => {\r\n                // history.push()を使うと、SPAでもページ履歴を使ってページ戻ったりできる\r\n                history.push('/quiz');\r\n            }}>\r\n                クイズページへ移動\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Home;\r\n","import axios from 'axios';\r\n\r\n\r\nconst API_URL = 'https://opentdb.com/api.php?amount=10&type=multiple';\r\n\r\nclass QuizFetcher {\r\n    static async fetch(){\r\n        const response = await axios.get(API_URL);\r\n        console.log(response.data, '*******axios.get()の結果');\r\n        return response.data;\r\n    }   \r\n\r\n}\r\n\r\nexport default QuizFetcher;\r\n","import _ from 'lodash';\r\nimport he from 'he';\r\nimport QuizFetcher from '../data_fetchers/QuizFetcher';\r\n\r\n\r\nclass Quiz {\r\n    // constructor(quizData) {\r\n    //     const question = quizData.question;\r\n    //     const correctAnswer = quizData.correctAnswer;\r\n    //     const incorrectAnswers = quizData.incorrectAnswers;\r\n    //     this._question = question;\r\n    //     this._correctAnswer = correctAnswer;\r\n    //     this._incorrectAnswers = [...incorrectAnswers]; // コピーを渡す\r\n    // }\r\n\r\n    constructor({ question, correctAnswer, incorrectAnswers }) {\r\n        this._question = question;\r\n        this._correctAnswer = correctAnswer;\r\n        this._incorrectAnswers = [...incorrectAnswers]; // コピーを渡す\r\n    }\r\n\r\n\r\n    // getキーワードを使って、getterを実装できる\r\n    get question() {\r\n        return this._question;\r\n    }\r\n\r\n    get correctAnswer() {\r\n        return this._correctAnswer;\r\n    }\r\n    \r\n    shuffleAnswers() {\r\n        // _.shuffleの_(アンダーバー)は、Lo Dashというライブラリを使っている\r\n        // Lo Dashについては、「https://lodash.com/docs/#shuffle」\r\n        return _.shuffle([\r\n            this._correctAnswer,\r\n            ...this._incorrectAnswers\r\n        ]);\r\n    }\r\n\r\n    judgeCorrectAnswer(answer) {\r\n        return answer === this._correctAnswer;\r\n    }\r\n\r\n    static async fetchAndCreateQuizzes() {\r\n        const quizDataList = await QuizFetcher.fetch();\r\n\r\n        return quizDataList.results.map(result => {\r\n            return {\r\n                question: he.decode(result.question),\r\n                correctAnswer: he.decode(result.correct_answer),\r\n                incorrectAnswers: result.incorrect_answers.map(str => he.decode(str))\r\n            };\r\n        })\r\n        .map(quizData => {\r\n            return new Quiz(quizData);\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport QuizModel from '../../models/Quiz';\r\nimport Button from '../Button/Button';\r\nimport './Quiz.css';\r\n\r\n\r\nclass Quiz extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            quizzes: [],\r\n            currentIndex: 0,\r\n            numberOfCorrects: 0\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.restart();\r\n    }\r\n\r\n    async restart() {\r\n        // stateをリセット\r\n        this.setState({\r\n            quizzes: [],\r\n            currentIndex: 0,\r\n            numberOfCorrects: 0\r\n        });\r\n\r\n        const quizzes = await QuizModel.fetchAndCreateQuizzes();\r\n        console.log(quizzes, '@@@@@@@@');\r\n        // setStateでquizzesプロパティに上記quizzes変数を代入\r\n        this.setState({quizzes});\r\n\r\n    }\r\n\r\n    selectAnswer(quiz, answer) {\r\n        let { currentIndex, numberOfCorrects } = this.state;\r\n        const isCorrect = quiz.judgeCorrectAnswer(answer);\r\n\r\n        if(isCorrect) {\r\n            numberOfCorrects++;\r\n            alert('Correct answer!!');\r\n        }else{\r\n            alert(`Wrong answer... (The correct answer is \"${quiz.correctAnswer}\"`);\r\n        }\r\n        currentIndex++;\r\n\r\n        this.setState({\r\n            currentIndex,\r\n            numberOfCorrects\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { quizzes, currentIndex } = this.state;\r\n\r\n        // 【読込中】quizzesが0個の場合に読込中\r\n        if(quizzes.length === 0) {\r\n            return this.renderLoading();\r\n        }\r\n\r\n        // 【クイズ中】\r\n        if(quizzes.length > 0 && currentIndex < quizzes.length)  {\r\n            return this.renderQuiz();\r\n        }\r\n\r\n        // 【クイズ結果】\r\n        if (quizzes.length > 0 && currentIndex >= quizzes.length) {\r\n            return this.renderResult();\r\n        }\r\n    }\r\n\r\n    renderLoading() {\r\n        return (\r\n            <div>\r\n                <h1>クイズページ</h1>\r\n                <p>Now loading...</p>\r\n                <hr/>\r\n                <Link to=\"/\">トップページへ</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderQuiz() {\r\n        const { currentIndex, quizzes } = this.state;\r\n\r\n        const quiz = quizzes[currentIndex];\r\n        // shuffleAnswers()でincorrectAnswerとcorrectAnswerが混じった配列を取得\r\n        const answers = quiz.shuffleAnswers().map((answer, index) => {\r\n            return (\r\n                <li key={index}>\r\n                    <Button\r\n                        onClickHandler={() => { this.selectAnswer(quiz, answer) }}\r\n                    >\r\n                        {answer}\r\n                    </Button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return(\r\n            <div>\r\n                <h1>クイズページ</h1>\r\n                <div>\r\n                    <p>{quiz.question}</p>\r\n                    <ul className=\"QuizList\">{answers}</ul>\r\n                </div>\r\n                <hr/>\r\n                <Link to=\"/\">トップページへ</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderResult() {\r\n        const { quizzes, numberOfCorrects } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h1>クイズページ</h1>\r\n                <div>\r\n                    <p id=\"result\">{`${numberOfCorrects}/${quizzes.length} corrects.`}</p>\r\n                    <Button\r\n                        onClickHandler={() => {this.restart()}}\r\n                    >\r\n                        Restart\r\n                    </Button>\r\n                </div>\r\n                <hr/>\r\n                <Link to=\"/\">トップページへ</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  Route\r\n} from 'react-router-dom';\r\nimport Home from './components/Home/Home';\r\nimport Quiz from './components/Quiz/Quiz';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/quiz\" exact component={Quiz} />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}